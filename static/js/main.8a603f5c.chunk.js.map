{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/TodoList.js","components/Filters.js","components/Footer.js","App.js","index.js"],"names":["Header","state","values","id","title","completed","editing","errors","resetForm","setState","prev","handleSubmit","e","preventDefault","trim","props","handleAddTodo","this","className","onSubmit","cn","error","placeholder","value","onChange","target","React","Component","TodoItem","editTitle","editCurrentTitle","handleEditTitle","key","type","setTodoTitle","todo","handleDoubleClick","setEditStatus","statusOfTodo","handleRemoveTodo","checked","onDoubleClick","onClick","onKeyDown","onBlur","TodoList","todos","visibleTodos","handleToggleAll","length","every","htmlFor","map","Filters","handleTypeOfFilter","typeOfFilter","href","selected","Footer","isCompletedPresent","handleClearCompleted","hidden","filter","App","editMode","newTodo","init","JSON","parse","localStorage","getItem","setItem","stringify","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8a603f5c.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  state = {\n    values: {\n      id: 1,\n      title: '',\n      completed: false,\n      editing: false,\n    },\n    errors: {\n      title: false,\n    },\n  };\n\n  resetForm = () => {\n    this.setState(prev => ({\n      values: {\n        ...prev.values,\n        title: '',\n        id: prev.values.id + 1,\n      },\n    }));\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.state.values.title.trim() === '') {\n      this.setState(prev => ({\n        errors: {\n          title: !prev.title,\n        },\n      }));\n\n      return;\n    }\n\n    if (this.state.errors.title === false) {\n      this.props.handleAddTodo(this.state.values);\n      this.resetForm();\n    }\n  };\n\n  render() {\n    const { values, errors } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            className={cn('new-todo', {\n              error: errors.title,\n            })}\n            placeholder=\"What needs to be done?\"\n            value={values.title}\n            onChange={({ target }) => {\n              this.setState(prev => ({\n                values: {\n                  ...prev.values,\n                  title: target.value,\n                },\n                errors: {\n                  title: false,\n                },\n              }));\n            }}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  handleAddTodo: PropTypes.func.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\n  state = {\n    editTitle: '',\n  }\n\n  editCurrentTitle = (e) => {\n    this.setState({\n      editTitle: e.target.value,\n    });\n  }\n\n  handleEditTitle = ({ key, target, type }) => {\n    const { setTodoTitle, todo } = this.props;\n    const { id } = target;\n\n    if ((key === 'Enter' && target.value.trim() !== '')\n    || (type === 'blur' && target.value.trim() !== '')) {\n      setTodoTitle(id, target.value.trim());\n    }\n\n    if (key === 'Escape') {\n      this.setState({ editTitle: todo.title });\n      setTodoTitle(id, todo.title);\n    }\n  }\n\n  handleDoubleClick = () => {\n    const { todo, setEditStatus } = this.props;\n    const { id, title } = todo;\n\n    this.setState({ editTitle: title });\n    setEditStatus(id);\n  }\n\n  render() {\n    const {\n      todo,\n      statusOfTodo,\n      handleRemoveTodo,\n    } = this.props;\n    const { id, title, completed } = todo;\n    const { editTitle } = this.state;\n\n    return (\n      <>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={id}\n            checked={completed}\n            onChange={() => statusOfTodo(id)}\n          />\n          <label onDoubleClick={this.handleDoubleClick}>{title}</label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleRemoveTodo(id)}\n          />\n        </div>\n        {todo.editing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            id={id}\n            value={editTitle}\n            onChange={this.editCurrentTitle}\n            onKeyDown={this.handleEditTitle}\n            onBlur={this.handleEditTitle}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    editing: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  statusOfTodo: PropTypes.func.isRequired,\n  setEditStatus: PropTypes.func.isRequired,\n  setTodoTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  todos,\n  visibleTodos,\n  handleRemoveTodo,\n  statusOfTodo,\n  handleToggleAll,\n  setEditStatus,\n  setTodoTitle,\n}) => (\n  <section className=\"main\">\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={todos.length > 0 && todos.every(todo => todo.completed)}\n      onChange={handleToggleAll}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n    <ul className=\"todo-list\">\n      {visibleTodos.map(todo => (\n        <li\n          className={cn({\n            completed: todo.completed,\n            editing: todo.editing,\n          })}\n          key={todo.id}\n        >\n          <TodoItem\n            todo={todo}\n            handleRemoveTodo={handleRemoveTodo}\n            statusOfTodo={statusOfTodo}\n            setEditStatus={setEditStatus}\n            setTodoTitle={setTodoTitle}\n          />\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  visibleTodos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      editing: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  handleRemoveTodo: PropTypes.func.isRequired,\n  statusOfTodo: PropTypes.func.isRequired,\n  handleToggleAll: PropTypes.func.isRequired,\n  setEditStatus: PropTypes.func.isRequired,\n  setTodoTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst Filters = ({ handleTypeOfFilter, typeOfFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={cn({\n          selected: typeOfFilter === 'all',\n        })}\n        onClick={() => handleTypeOfFilter('all')}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        className={cn({\n          selected: typeOfFilter === 'active',\n        })}\n        onClick={() => handleTypeOfFilter('active')}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        className={cn({\n          selected: typeOfFilter === 'completed',\n        })}\n        onClick={() => handleTypeOfFilter('completed')}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nFilters.propTypes = {\n  handleTypeOfFilter: PropTypes.func.isRequired,\n  typeOfFilter: PropTypes.string.isRequired,\n};\n\nexport default Filters;\n","import React from 'react';\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\nimport Filters from './Filters';\n\nconst Footer = ({\n  todos,\n  isCompletedPresent,\n  handleClearCompleted,\n  handleTypeOfFilter,\n  typeOfFilter,\n}) => (\n  <footer className={\n    cn(\n      'footer',\n      { hidden: todos.length === 0 },\n    )\n  }\n  >\n    <span className=\"todo-count\">\n      {todos.filter(todo => !todo.completed).length}\n      {' '}\n      items left\n    </span>\n\n    <Filters\n      handleTypeOfFilter={handleTypeOfFilter}\n      typeOfFilter={typeOfFilter}\n    />\n\n    <button\n      type=\"button\"\n      className={cn('clear-completed', {\n        hidden: !isCompletedPresent,\n      })}\n      onClick={handleClearCompleted}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  isCompletedPresent: PropTypes.bool.isRequired,\n  handleClearCompleted: PropTypes.func.isRequired,\n  handleTypeOfFilter: PropTypes.func.isRequired,\n  typeOfFilter: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/Header';\nimport TodoList from './components/TodoList';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    typeOfFilter: 'all',\n    editMode: false,\n  }\n\n  componentDidMount() {\n    const init = JSON.parse(localStorage.getItem('todoApp'));\n\n    if (init) {\n      this.setState({ ...init });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoApp', JSON.stringify(this.state));\n  }\n\n  setTodoTitle = (id, title) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((todo) => {\n        if (todo.id === +id) {\n          return {\n            ...todo,\n            title,\n            editing: false,\n          };\n        }\n\n        return todo;\n      }),\n      editMode: !prev.editMode,\n    }));\n  }\n\n  setEditStatus = (id) => {\n    if (this.state.editMode) {\n      return;\n    }\n\n    this.setState(prev => ({\n      todos: prev.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            editing: !todo.editing,\n          };\n        }\n\n        return todo;\n      }),\n      editMode: !prev.editMode,\n    }));\n  }\n\n  handleToggleAll = ({ target }) => {\n    this.setState(prev => ({\n      todos: prev.todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  handleAddTodo = (newTodo) => {\n    this.setState(prev => ({\n      todos: [...prev.todos, newTodo],\n    }));\n  }\n\n  handleRemoveTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  statusOfTodo = (id) => {\n    this.setState(prev => ({\n      todos: prev.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  handleTypeOfFilter = (type) => {\n    if (this.state.editMode) {\n      return;\n    }\n\n    this.setState({\n      typeOfFilter: type,\n    });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(prev => ({\n      todos: prev.todos.filter(todo => !todo.completed),\n    }));\n\n    if (this.state.typeOfFilter === 'completed') {\n      this.handleTypeOfFilter('all');\n    }\n  }\n\n  render() {\n    const { todos, typeOfFilter } = this.state;\n    const isCompletedPresent = todos.some(todo => todo.completed);\n    let visibleTodos = [...todos];\n\n    if (typeOfFilter === 'completed') {\n      visibleTodos = todos.filter(todo => todo.completed);\n    }\n\n    if (typeOfFilter === 'active') {\n      visibleTodos = todos.filter(todo => !todo.completed);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <Header handleAddTodo={this.handleAddTodo} />\n        <TodoList\n          todos={todos}\n          visibleTodos={visibleTodos}\n          handleRemoveTodo={this.handleRemoveTodo}\n          statusOfTodo={this.statusOfTodo}\n          handleToggleAll={this.handleToggleAll}\n          setEditStatus={this.setEditStatus}\n          setTodoTitle={this.setTodoTitle}\n        />\n        <Footer\n          todos={todos}\n          isCompletedPresent={isCompletedPresent}\n          handleClearCompleted={this.handleClearCompleted}\n          handleTypeOfFilter={this.handleTypeOfFilter}\n          typeOfFilter={typeOfFilter}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}